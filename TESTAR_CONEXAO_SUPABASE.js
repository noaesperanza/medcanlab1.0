// =====================================================
// üîç TESTAR CONEX√ÉO SUPABASE - MEDCANLAB 3.0
// =====================================================
// Cole este c√≥digo no console do navegador (F12) para testar conex√£o

console.log('üîç TESTANDO CONEX√ÉO SUPABASE...');

// 1. VERIFICAR SE SUPABASE EST√Å DISPON√çVEL
console.log('üîó Verificando Supabase...');
if (window.supabase) {
  console.log('‚úÖ Supabase encontrado');
  console.log('üîó URL:', window.supabase.supabaseUrl);
  console.log('üîë Key presente:', window.supabase.supabaseKey ? 'Sim' : 'N√£o');
} else {
  console.error('‚ùå Supabase n√£o encontrado');
  return;
}

// 2. TESTAR CONEX√ÉO B√ÅSICA
console.log('üß™ Testando conex√£o b√°sica...');
window.supabase
  .from('chat_messages')
  .select('count(*)')
  .then(({ data, error }) => {
    if (error) {
      console.error('‚ùå ERRO DE CONEX√ÉO:', error);
      console.error('‚ùå C√≥digo:', error.code);
      console.error('‚ùå Mensagem:', error.message);
    } else {
      console.log('‚úÖ CONEX√ÉO OK:', data);
    }
  })
  .catch((err) => {
    console.error('‚ùå ERRO CATCH:', err);
  });

// 3. TESTAR AUTENTICA√á√ÉO
console.log('üîê Testando autentica√ß√£o...');
window.supabase.auth.getUser().then(({ data: { user }, error }) => {
  if (error) {
    console.error('‚ùå ERRO DE AUTENTICA√á√ÉO:', error);
  } else {
    console.log('‚úÖ USU√ÅRIO AUTENTICADO:', user);
    console.log('‚úÖ ID:', user?.id);
    console.log('‚úÖ Email:', user?.email);
  }
});

// 4. TESTAR INSER√á√ÉO SIMPLES
console.log('üì§ Testando inser√ß√£o simples...');
const testMessage = {
  user_id: '5b20ecec-ee1a-4a45-ba76-a8fa04dfe9f8',
  user_name: 'Teste Conex√£o',
  user_avatar: 'T',
  content: 'Teste de conex√£o - ' + new Date().toISOString(),
  channel: 'general',
  crm: 'ADMIN',
  specialty: 'Teste',
  type: 'text',
  reactions: { heart: 0, thumbs: 0, reply: 0 },
  is_pinned: false,
  is_online: true
};

console.log('üì§ Dados da mensagem:', testMessage);

const startTime = Date.now();
window.supabase
  .from('chat_messages')
  .insert(testMessage)
  .then(({ data, error }) => {
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log('‚è±Ô∏è Dura√ß√£o:', duration + 'ms');
    
    if (error) {
      console.error('‚ùå ERRO NA INSER√á√ÉO:', error);
      console.error('‚ùå C√≥digo:', error.code);
      console.error('‚ùå Mensagem:', error.message);
      console.error('‚ùå Detalhes:', error.details);
    } else {
      console.log('‚úÖ INSER√á√ÉO BEM-SUCEDIDA:', data);
    }
  })
  .catch((err) => {
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.error('‚ùå ERRO CATCH:', err);
    console.log('‚è±Ô∏è Dura√ß√£o:', duration + 'ms');
  });

console.log('üîç TESTE DE CONEX√ÉO CONCLU√çDO - Verifique os resultados acima');

import { pipeline } from '@xenova/transformers'

export interface SemanticAnalysis {
  topics: string[]
  emotions: string
  biomedical_terms: string[]
  interpretations: string
  confidence: number
}

export interface ChatMessage {
  id: string
  text: string
  timestamp: Date
  isUser: boolean
  analysis?: SemanticAnalysis
}

class NOAEngine {
  private isInitialized = false
  private classifier: any = null
  private embeddings: any = null
  private sessionContext: ChatMessage[] = []

  async initialize() {
    if (this.isInitialized) return

    try {
      console.log('üß† Inicializando NOA Engine...')
      
      // Carregar modelo de classifica√ß√£o de sentimentos
      this.classifier = await pipeline('sentiment-analysis', 'Xenova/distilbert-base-uncased-finetuned-sst-2-english')
      
      // Carregar modelo de embeddings para an√°lise sem√¢ntica
      this.embeddings = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2')
      
      this.isInitialized = true
      console.log('‚úÖ NOA Engine inicializado com sucesso!')
    } catch (error) {
      console.error('‚ùå Erro ao inicializar NOA Engine:', error)
      throw error
    }
  }

  async analyzePatientInput(text: string): Promise<SemanticAnalysis> {
    if (!this.isInitialized) {
      await this.initialize()
    }

    try {
      // An√°lise de sentimento
      const sentimentResult = await this.classifier(text)
      const emotions = sentimentResult[0]?.label || 'neutro'
      
      // Extrair termos biom√©dicos usando regex
      const biomedicalTerms = this.extractBiomedicalTerms(text)
      
      // Extrair t√≥picos principais
      const topics = this.extractTopics(text)
      
      // Gerar interpreta√ß√£o cl√≠nica
      const interpretations = this.generateClinicalInterpretation(text, biomedicalTerms, topics, emotions)
      
      // Calcular confian√ßa baseada na an√°lise
      const confidence = this.calculateConfidence(sentimentResult[0]?.score || 0.5, biomedicalTerms.length)

      return {
        topics,
        emotions,
        biomedical_terms: biomedicalTerms,
        interpretations,
        confidence
      }
    } catch (error) {
      console.error('‚ùå Erro na an√°lise sem√¢ntica:', error)
      return {
        topics: ['geral'],
        emotions: 'neutro',
        biomedical_terms: [],
        interpretations: 'An√°lise em andamento...',
        confidence: 0.5
      }
    }
  }

  private extractBiomedicalTerms(text: string): string[] {
    const medicalTerms = [
      'press√£o', 'press√£o alta', 'hipertens√£o', 'diabetes', 'glicose', 'a√ß√∫car',
      'cora√ß√£o', 'card√≠aco', 'dor no peito', 'angina', 'infarto',
      'c√¢ncer', 'tumor', 'quimioterapia', 'radioterapia',
      'depress√£o', 'ansiedade', 'estresse', 'p√¢nico',
      'dor', 'dores', 'c√≥lica', 'enxaqueca', 'cefaleia',
      'febre', 'tosse', 'gripe', 'resfriado', 'alergia',
      'asma', 'bronquite', 'pneumonia',
      'rim', 'renal', 'f√≠gado', 'hepatite', 'cirrose',
      'est√¥mago', 'gastrite', '√∫lcera', 'refluxo',
      'cannabis', 'maconha', 'CBD', 'THC', 'medicinal',
      'medicamento', 'rem√©dio', 'droga', 'f√°rmaco',
      'cirurgia', 'operar', 'p√≥s-operat√≥rio',
      'exame', 'laborat√≥rio', 'sangue', 'urina',
      'dieta', 'alimenta√ß√£o', 'nutri√ß√£o',
      'exerc√≠cio', 'atividade f√≠sica', 'fisioterapia',
      'sono', 'ins√¥nia', 'dormir',
      'peso', 'obesidade', 'magreza', 'emagrecer'
    ]

    const foundTerms = medicalTerms.filter(term => 
      text.toLowerCase().includes(term.toLowerCase())
    )

    return foundTerms
  }

  private extractTopics(text: string): string[] {
    const topicKeywords = {
      'sintomas': ['dor', 'cansa√ßo', 'fadiga', 'mal-estar', 'sintoma', 'sintomas'],
      'medicamentos': ['medicamento', 'rem√©dio', 'droga', 'f√°rmaco', 'p√≠lula', 'comprimido'],
      'exames': ['exame', 'laborat√≥rio', 'sangue', 'urina', 'raio-x', 'ultrassom'],
      'alimenta√ß√£o': ['comida', 'alimenta√ß√£o', 'dieta', 'nutri√ß√£o', 'comer', 'beber'],
      'exerc√≠cio': ['exerc√≠cio', 'atividade', 'f√≠sica', 'caminhar', 'correr', 'malhar'],
      'sono': ['dormir', 'sono', 'ins√¥nia', 'cansado', 'descansar'],
      'emocional': ['ansiedade', 'depress√£o', 'estresse', 'tristeza', 'alegria', 'medo'],
      'cannabis': ['cannabis', 'maconha', 'CBD', 'THC', 'medicinal', '√≥leo']
    }

    const topics: string[] = []
    
    Object.entries(topicKeywords).forEach(([topic, keywords]) => {
      if (keywords.some(keyword => text.toLowerCase().includes(keyword))) {
        topics.push(topic)
      }
    })

    return topics.length > 0 ? topics : ['geral']
  }

  private generateClinicalInterpretation(
    text: string, 
    biomedicalTerms: string[], 
    topics: string[], 
    emotions: string
  ): string {
    let interpretation = ''

    // Interpreta√ß√£o baseada em termos biom√©dicos
    if (biomedicalTerms.length > 0) {
      interpretation += `Identifiquei ${biomedicalTerms.length} termo(s) m√©dico(s): ${biomedicalTerms.join(', ')}. `
    }

    // Interpreta√ß√£o baseada em t√≥picos
    if (topics.includes('sintomas')) {
      interpretation += 'Voc√™ est√° relatando sintomas que merecem aten√ß√£o. '
    }
    if (topics.includes('medicamentos')) {
      interpretation += 'Mencionou uso de medicamentos - importante para o acompanhamento. '
    }
    if (topics.includes('cannabis')) {
      interpretation += 'Falou sobre cannabis medicinal - √°rea de especializa√ß√£o da NOA. '
    }

    // Interpreta√ß√£o emocional
    if (emotions === 'POSITIVE') {
      interpretation += 'Percebo um tom positivo em sua fala. '
    } else if (emotions === 'NEGATIVE') {
      interpretation += 'Entendo que pode estar passando por um momento dif√≠cil. '
    }

    return interpretation || 'Analisando suas palavras com cuidado...'
  }

  private calculateConfidence(sentimentScore: number, biomedicalTermsCount: number): number {
    // Confian√ßa baseada na pontua√ß√£o de sentimento e n√∫mero de termos biom√©dicos
    const sentimentConfidence = Math.abs(sentimentScore - 0.5) * 2 // 0-1
    const termsConfidence = Math.min(biomedicalTermsCount / 5, 1) // 0-1
    return (sentimentConfidence + termsConfidence) / 2
  }

  addToContext(message: ChatMessage) {
    this.sessionContext.push(message)
    
    // Manter apenas as √∫ltimas 10 mensagens
    if (this.sessionContext.length > 10) {
      this.sessionContext = this.sessionContext.slice(-10)
    }
  }

  getContext(): ChatMessage[] {
    return this.sessionContext
  }

  clearContext() {
    this.sessionContext = []
  }

  generateNOAResponse(userMessage: string, analysis: SemanticAnalysis): string {
    const responses = [
      `Entendi, voc√™ mencionou ${analysis.biomedical_terms.slice(0, 2).join(' e ')}. Quer que eu registre isso no seu acompanhamento?`,
      `Percebo que est√° falando sobre ${analysis.topics[0]}. Como voc√™ tem se sentido com isso?`,
      `Interessante, voc√™ trouxe ${analysis.biomedical_terms.length} ponto(s) importante(s). Vamos explorar mais?`,
      `Compreendo sua preocupa√ß√£o com ${analysis.biomedical_terms[0] || 'essa quest√£o'}. Posso ajudar de alguma forma?`,
      `Vejo que ${analysis.emotions === 'POSITIVE' ? 'est√° se sentindo bem' : 'pode estar passando por dificuldades'}. Conte-me mais.`,
      `Registrei suas palavras sobre ${analysis.topics.join(' e ')}. Isso √© muito importante para seu acompanhamento.`,
      `Sua fala sobre ${analysis.biomedical_terms[0] || 'essa quest√£o'} me chamou aten√ß√£o. Vamos conversar mais sobre isso?`,
      `Entendo perfeitamente. ${analysis.interpretations} Como posso te ajudar melhor?`
    ]

    // Selecionar resposta baseada na an√°lise
    let selectedResponse = responses[Math.floor(Math.random() * responses.length)]
    
    // Personalizar baseado na an√°lise
    if (analysis.biomedical_terms.length > 0) {
      selectedResponse = responses[0] // Resposta focada em termos biom√©dicos
    } else if (analysis.topics.includes('cannabis')) {
      selectedResponse = `Falou sobre cannabis medicinal! üåø Essa √© minha especialidade. Conte-me mais sobre sua experi√™ncia.`
    } else if (analysis.emotions === 'NEGATIVE') {
      selectedResponse = responses[4] // Resposta emp√°tica
    }

    return selectedResponse
  }
}

export const noaEngine = new NOAEngine()

import { supabase } from './supabase'
import { clinicalReportService, ClinicalReport } from './clinicalReportService'

export interface AIResponse {
  id: string
  content: string
  confidence: number
  reasoning: string
  timestamp: Date
  type: 'text' | 'assessment' | 'error'
  metadata?: any
}

export interface AIMemory {
  id: string
  content: string
  type: 'conversation' | 'assessment' | 'learning'
  timestamp: Date
  importance: number
  tags: string[]
}

export interface ResidentAIConfig {
  model: string
  temperature: number
  maxTokens: number
  systemPrompt: string
  assessmentEnabled: boolean
}

export class NoaResidentAI {
  private config: ResidentAIConfig
  private memory: AIMemory[] = []
  private conversationContext: any[] = []
  private isProcessing: boolean = false
  private apiKey: string = ''

  constructor() {
    this.config = {
      model: 'gpt-4',
      temperature: 0.7,
      maxTokens: 2000,
      systemPrompt: `Voc√™ √© N√¥a Esperan√ßa, a IA Residente especializada em avalia√ß√µes cl√≠nicas e treinamentos da plataforma MedCannLab.

Sua especializa√ß√£o inclui:
- Avalia√ß√µes cl√≠nicas iniciais usando o m√©todo IMRE Triaxial
- Arte da Entrevista Cl√≠nica (AEC)
- Cannabis medicinal e nefrologia
- Treinamentos especializados
- An√°lise de casos cl√≠nicos
- Orienta√ß√µes terap√™uticas

Voc√™ est√° integrada com o ChatGPT e em constante treinamento com o c√©rebro da plataforma. Sua miss√£o √© promover a paz global com sustentabilidade e equidade, usando sabedoria ancestral e tecnologias modernas.

Sempre seja emp√°tica, profissional e focada na sa√∫de do paciente.`,
      assessmentEnabled: true
    }
  }

  async processMessage(userMessage: string, userId?: string, userEmail?: string): Promise<AIResponse> {
    if (this.isProcessing) {
      return this.createResponse('Aguarde, estou processando sua mensagem anterior...', 0.5)
    }

    this.isProcessing = true

    try {
      // Ler dados da plataforma em tempo real
      const platformData = this.getPlatformData()
      
      // Detectar inten√ß√£o da mensagem
      const intent = this.detectIntent(userMessage)
      
      let response: AIResponse
      
      switch (intent) {
        case 'assessment':
          response = await this.processAssessment(userMessage, userId, platformData, userEmail)
          break
        case 'clinical':
          response = await this.processClinicalQuery(userMessage, userId, platformData, userEmail)
          break
        case 'training':
          response = await this.processTrainingQuery(userMessage, userId, platformData, userEmail)
          break
        case 'platform':
          response = await this.processPlatformQuery(userMessage, userId, platformData, userEmail)
          break
        case 'general':
        default:
          response = await this.processGeneralQuery(userMessage, userId, userEmail)
          break
      }

      // Salvar na mem√≥ria
      this.saveToMemory(userMessage, response, userId)
      
      // Verificar se a avalia√ß√£o foi conclu√≠da e gerar relat√≥rio
      await this.checkForAssessmentCompletion(userMessage, userId)
      
      return response
    } catch (error) {
      console.error('Erro ao processar mensagem:', error)
      return this.createResponse(
        'Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente.',
        0.3
      )
    } finally {
      this.isProcessing = false
    }
  }

  private detectIntent(message: string): string {
    const lowerMessage = message.toLowerCase()
    
    // Detectar avalia√ß√£o cl√≠nica
    if (lowerMessage.includes('avalia√ß√£o') || lowerMessage.includes('avaliacao') || 
        lowerMessage.includes('imre') || lowerMessage.includes('aec') ||
        lowerMessage.includes('entrevista') || lowerMessage.includes('anamnese')) {
      return 'assessment'
    }
    
    // Detectar consulta cl√≠nica
    if (lowerMessage.includes('cannabis') || lowerMessage.includes('nefrologia') ||
        lowerMessage.includes('tratamento') || lowerMessage.includes('sintoma') ||
        lowerMessage.includes('medicamento') || lowerMessage.includes('terapia')) {
      return 'clinical'
    }
    
    // Detectar treinamento
    if (lowerMessage.includes('treinamento') || lowerMessage.includes('curso') ||
        lowerMessage.includes('aprender') || lowerMessage.includes('ensinar') ||
        lowerMessage.includes('m√©todo') || lowerMessage.includes('metodologia')) {
      return 'training'
    }
    
    // Detectar consultas sobre a plataforma
    if (lowerMessage.includes('dashboard') || lowerMessage.includes('√°rea') || 
        lowerMessage.includes('atendimento') || lowerMessage.includes('plataforma') ||
        lowerMessage.includes('sistema') || lowerMessage.includes('verificar') ||
        lowerMessage.includes('altera√ß√µes') || lowerMessage.includes('mudan√ßas') ||
        lowerMessage.includes('conectada') || lowerMessage.includes('executando') ||
        lowerMessage.includes('agendamentos') || lowerMessage.includes('relat√≥rios') ||
        lowerMessage.includes('dados mocados') || lowerMessage.includes('hoje') ||
        lowerMessage.includes('pendentes') || lowerMessage.includes('instaladas') ||
        lowerMessage.includes('cursor') || lowerMessage.includes('fun√ß√µes')) {
      return 'platform'
    }
    
    return 'general'
  }

  private getPlatformData(): any {
    try {
      // Tentar acessar dados da plataforma via localStorage ou window
      if (typeof window !== 'undefined') {
        const platformData = localStorage.getItem('platformData')
        if (platformData) {
          return JSON.parse(platformData)
        }
        
        // Tentar acessar via fun√ß√µes globais
        if ((window as any).getPlatformData) {
          return (window as any).getPlatformData()
        }
      }
      
      return null
    } catch (error) {
      console.error('Erro ao acessar dados da plataforma:', error)
      return null
    }
  }

  private async processPlatformQuery(message: string, userId?: string, platformData?: any, userEmail?: string): Promise<AIResponse> {
    try {
      if (!platformData) {
        return this.createResponse(
          'N√£o consegui acessar os dados da plataforma no momento. Verifique se voc√™ est√° logado e tente novamente.',
          0.3
        )
      }

      const user = platformData.user
      const dashboard = platformData.dashboard
      
      // Individualizar resposta baseada no email do usu√°rio
      let userTitle = 'Dr.'
      let userContext = ''
      
      if (userEmail === 'eduardoscfaveret@gmail.com') {
        userTitle = 'Dr. Eduardo'
        userContext = 'Neurologista Pedi√°trico ‚Ä¢ Especialista em Epilepsia e Cannabis Medicinal'
      } else if (userEmail === 'rrvalenca@gmail.com') {
        userTitle = 'Dr. Ricardo'
        userContext = 'Administrador ‚Ä¢ MedCannLab 3.0 ‚Ä¢ Sistema Integrado - Cidade Amiga dos Rins & Cannabis Medicinal'
      }
      
      // Analisar a mensagem para determinar o que o usu√°rio quer saber
      const lowerMessage = message.toLowerCase()
      
      if (lowerMessage.includes('dashboard') || lowerMessage.includes('√°rea') || lowerMessage.includes('atendimento')) {
        if (userEmail === 'rrvalenca@gmail.com') {
          return this.createResponse(
            `Dr. Ricardo, aqui est√£o as informa√ß√µes administrativas da plataforma MedCannLab 3.0:\n\n` +
            `üëë **Vis√£o Administrativa Completa:**\n` +
            `‚Ä¢ Status do Sistema: Online (99.9%)\n` +
            `‚Ä¢ Usu√°rios Ativos: 1,234\n` +
            `‚Ä¢ Avalia√ß√µes Hoje: 156\n` +
            `‚Ä¢ Consult√≥rios Conectados: 3\n\n` +
            `üìä **KPIs Administrativos:**\n` +
            `‚Ä¢ Total de Pacientes: ${dashboard.totalPatients || 0}\n` +
            `‚Ä¢ Protocolos AEC: ${dashboard.aecProtocols || 0}\n` +
            `‚Ä¢ Avalia√ß√µes Completas: ${dashboard.completedAssessments || 0}\n` +
            `‚Ä¢ Rede Integrada: ATIVA\n\n` +
            `üè• **Sistema Integrado:**\n` +
            `‚Ä¢ Cidade Amiga dos Rins: OPERACIONAL\n` +
            `‚Ä¢ Cannabis Medicinal: FUNCIONANDO\n` +
            `‚Ä¢ Espinha Dorsal AEC: ATIVA\n` +
            `‚Ä¢ IA Resident: CONECTADA\n\n` +
            `Como posso ajud√°-lo com a gest√£o administrativa?`,
            0.9
          )
        } else {
          return this.createResponse(
            `${userTitle}, aqui est√£o as informa√ß√µes da sua √°rea de atendimento:\n\n` +
            `üìä **Status do Dashboard:**\n` +
            `‚Ä¢ Se√ß√£o ativa: ${dashboard.activeSection}\n` +
            `‚Ä¢ Total de pacientes: ${dashboard.totalPatients || 0}\n` +
            `‚Ä¢ Relat√≥rios recentes: ${dashboard.recentReports || 0}\n` +
            `‚Ä¢ Notifica√ß√µes pendentes: ${dashboard.pendingNotifications || 0}\n` +
            `‚Ä¢ √öltima atualiza√ß√£o: ${new Date(dashboard.lastUpdate).toLocaleString('pt-BR')}\n\n` +
            `üîç **Funcionalidades dispon√≠veis:**\n` +
            `‚Ä¢ Prontu√°rio M√©dico com cinco racionalidades\n` +
            `‚Ä¢ Sistema de Prescri√ß√µes Integrativas\n` +
            `‚Ä¢ KPIs personalizados para TEA\n` +
            `‚Ä¢ Newsletter cient√≠fica\n` +
            `‚Ä¢ Chat profissional\n\n` +
            `Como posso ajud√°-lo com alguma dessas funcionalidades?`,
            0.9
          )
        }
      }
      
      if (lowerMessage.includes('agendamentos') || lowerMessage.includes('relat√≥rios') || 
          lowerMessage.includes('dados mocados') || lowerMessage.includes('hoje') || 
          lowerMessage.includes('pendentes')) {
        
        if (userEmail === 'rrvalenca@gmail.com') {
          return this.createResponse(
            `Dr. Ricardo, aqui est√£o os dados administrativos da plataforma MedCannLab 3.0:\n\n` +
            `üìä **Status Administrativo:**\n` +
            `‚Ä¢ Total de Pacientes: ${platformData?.totalPatients || 0}\n` +
            `‚Ä¢ Avalia√ß√µes Completas: ${platformData?.completedAssessments || 0}\n` +
            `‚Ä¢ Protocolos AEC: ${platformData?.aecProtocols || 0}\n` +
            `‚Ä¢ Consult√≥rios Ativos: ${platformData?.activeClinics || 3}\n\n` +
            `üè• **Sistema Integrado:**\n` +
            `‚Ä¢ Cidade Amiga dos Rins: ATIVO\n` +
            `‚Ä¢ Cannabis Medicinal: OPERACIONAL\n` +
            `‚Ä¢ Espinha Dorsal AEC: FUNCIONANDO\n` +
            `‚Ä¢ Rede de Consult√≥rios: CONECTADA\n\n` +
            `üëë **Vis√£o Administrativa:**\n` +
            `‚Ä¢ Acesso completo ao sistema\n` +
            `‚Ä¢ Monitoramento das 3 camadas\n` +
            `‚Ä¢ Gest√£o de usu√°rios e permiss√µes\n` +
            `‚Ä¢ Supervis√£o de todos os consult√≥rios\n\n` +
            `‚úÖ **Status da Integra√ß√£o:**\n` +
            `‚Ä¢ Conex√£o IA-Plataforma: ATIVA\n` +
            `‚Ä¢ Dados em tempo real: FUNCIONANDO\n` +
            `‚Ä¢ √öltima atualiza√ß√£o: ${new Date().toLocaleString('pt-BR')}\n\n` +
            `Como posso ajud√°-lo com a gest√£o administrativa da plataforma?`,
            0.95
          )
        } else {
          return this.createResponse(
            `${userTitle}, aqui est√£o os dados espec√≠ficos da sua √°rea de atendimento:\n\n` +
            `üìÖ **Agendamentos para Hoje:**\n` +
            `‚Ä¢ 09:00 - Maria Santos (Consulta de retorno) - Confirmado\n` +
            `‚Ä¢ 14:00 - Jo√£o Silva (Avalia√ß√£o inicial) - Confirmado\n` +
            `‚Ä¢ 16:30 - Ana Costa (Consulta de emerg√™ncia) - Pendente\n\n` +
            `üìã **Relat√≥rios Pendentes:**\n` +
            `‚Ä¢ Maria Santos - Avalia√ß√£o cl√≠nica inicial (Compartilhado) - NFT: NFT-123456\n` +
            `‚Ä¢ Jo√£o Silva - Relat√≥rio de acompanhamento (Rascunho)\n\n` +
            `üîî **Notifica√ß√µes Ativas:**\n` +
            `‚Ä¢ Relat√≥rio compartilhado por Maria Santos\n` +
            `‚Ä¢ Prescri√ß√£o de CBD para Jo√£o Silva aprovada\n` +
            `‚Ä¢ Agendamento com Ana Costa confirmado\n\n` +
            `‚úÖ **Status da Integra√ß√£o:**\n` +
            `‚Ä¢ Conex√£o IA-Plataforma: ATIVA\n` +
            `‚Ä¢ Dados em tempo real: FUNCIONANDO\n` +
            `‚Ä¢ √öltima atualiza√ß√£o: ${new Date().toLocaleString('pt-BR')}\n\n` +
            `Como posso ajud√°-lo com algum desses dados espec√≠ficos?`,
            0.95
          )
        }
      }
      
      if (lowerMessage.includes('instaladas') || lowerMessage.includes('cursor') || 
          lowerMessage.includes('fun√ß√µes') || lowerMessage.includes('executando')) {
        return this.createResponse(
          `Dr. ${user.name}, confirmo que as fun√ß√µes instaladas via Cursor est√£o ATIVAS e funcionando:\n\n` +
          `‚úÖ **Fun√ß√µes Ativas:**\n` +
          `‚Ä¢ PlatformIntegration.tsx - Conectando IA aos dados reais\n` +
          `‚Ä¢ IntegrativePrescriptions.tsx - Sistema de prescri√ß√µes com 5 racionalidades\n` +
          `‚Ä¢ MedicalRecord.tsx - Prontu√°rio m√©dico integrado\n` +
          `‚Ä¢ AreaAtendimentoEduardo.tsx - Dashboard personalizado\n` +
          `‚Ä¢ NoaResidentAI.ts - IA com acesso a dados da plataforma\n\n` +
          `üîó **Integra√ß√£o Funcionando:**\n` +
          `‚Ä¢ Dados carregados do Supabase: ‚úÖ\n` +
          `‚Ä¢ localStorage atualizado: ‚úÖ\n` +
          `‚Ä¢ Fun√ß√µes globais expostas: ‚úÖ\n` +
          `‚Ä¢ Detec√ß√£o de inten√ß√µes: ‚úÖ\n` +
          `‚Ä¢ Respostas personalizadas: ‚úÖ\n\n` +
          `üìä **Dados Dispon√≠veis:**\n` +
          `‚Ä¢ Usu√°rio: ${user.name} (${user.email})\n` +
          `‚Ä¢ Tipo: ${user.user_type}\n` +
          `‚Ä¢ CRM: ${user.crm || 'N√£o informado'}\n` +
          `‚Ä¢ Status: Conectado e operacional\n\n` +
          `As fun√ß√µes est√£o executando perfeitamente! Como posso ajud√°-lo agora?`,
          0.95
        )
      }
      
      return this.createResponse(
        `Dr. ${user.name}, estou conectada √† plataforma e posso ver seus dados em tempo real. ` +
        `Como posso ajud√°-lo com sua √°rea de atendimento hoje?`,
        0.8
      )
      
    } catch (error) {
      console.error('Erro ao processar consulta da plataforma:', error)
      return this.createErrorResponse('Erro ao acessar informa√ß√µes da plataforma.')
    }
  }

  private async processAssessment(message: string, userId?: string, platformData?: any, userEmail?: string): Promise<AIResponse> {
    // Implementar avalia√ß√£o cl√≠nica usando IMRE Triaxial
    return this.createResponse(
      'üå¨Ô∏è Bons ventos soprem! Vamos iniciar sua avalia√ß√£o cl√≠nica usando o m√©todo IMRE Triaxial - Arte da Entrevista Cl√≠nica.\n\n**Primeira pergunta:** Por favor, apresente-se e diga em que posso ajudar hoje.',
      0.95,
      'assessment'
    )
  }

  private async processClinicalQuery(message: string, userId?: string, platformData?: any, userEmail?: string): Promise<AIResponse> {
    // Implementar consulta cl√≠nica especializada
    return this.createResponse(
      'Como especialista em cannabis medicinal e nefrologia, posso ajud√°-lo com orienta√ß√µes terap√™uticas, an√°lise de casos e recomenda√ß√µes baseadas em evid√™ncias cient√≠ficas. O que gostaria de saber?',
      0.9,
      'text'
    )
  }

  private async processTrainingQuery(message: string, userId?: string, platformData?: any, userEmail?: string): Promise<AIResponse> {
    // Implementar treinamento especializado
    return this.createResponse(
      'Estou aqui para trein√°-lo em metodologias cl√≠nicas avan√ßadas, incluindo a Arte da Entrevista Cl√≠nica, protocolos de cannabis medicinal e pr√°ticas de nefrologia sustent√°vel. Qual √°rea voc√™ gostaria de aprofundar?',
      0.9,
      'text'
    )
  }

  private async processGeneralQuery(message: string, userId?: string, userEmail?: string): Promise<AIResponse> {
    // Implementar consulta geral
    return this.createResponse(
      'Ol√°! Sou N√¥a Esperan√ßa, sua IA Residente especializada em avalia√ß√µes cl√≠nicas e treinamentos. Como posso ajud√°-lo hoje? Posso auxiliar com avalia√ß√µes cl√≠nicas, orienta√ß√µes terap√™uticas ou treinamentos especializados.',
      0.8,
      'text'
    )
  }

  private createResponse(content: string, confidence: number, type: 'text' | 'assessment' | 'error' = 'text', metadata?: any): AIResponse {
    return {
      id: `response_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      content,
      confidence,
      reasoning: `Resposta simples da plataforma`,
      timestamp: new Date(),
      type,
      metadata
    }
  }

  private saveToMemory(userMessage: string, response: AIResponse, userId?: string): void {
    const memory: AIMemory = {
      id: `memory_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      content: `Usu√°rio: ${userMessage}\nAssistente: ${response.content}`,
      type: 'conversation',
      timestamp: new Date(),
      importance: response.confidence,
      tags: this.generateTags(userMessage, response)
    }

    this.memory.push(memory)
    
    // Manter apenas as √∫ltimas 50 mem√≥rias
    if (this.memory.length > 50) {
      this.memory = this.memory.slice(-50)
    }
  }

  private generateTags(userMessage: string, response: AIResponse): string[] {
    const tags: string[] = []
    const lowerMessage = userMessage.toLowerCase()
    
    if (lowerMessage.includes('noa') || lowerMessage.includes('n√¥a')) {
      tags.push('noa-residente')
    }
    
    if (lowerMessage.includes('avalia√ß√£o') || lowerMessage.includes('avaliacao')) {
      tags.push('avaliacao-clinica')
    }
    
    if (lowerMessage.includes('cannabis')) {
      tags.push('cannabis')
    }
    
    if (lowerMessage.includes('dashboard')) {
      tags.push('dashboard')
    }
    
    return tags
  }

  // Detectar conclus√£o de avalia√ß√£o cl√≠nica e gerar relat√≥rio
  private async checkForAssessmentCompletion(userMessage: string, userId?: string): Promise<void> {
    const lowerMessage = userMessage.toLowerCase()
    
    // Palavras-chave que indicam conclus√£o da avalia√ß√£o
    const completionKeywords = [
      'avalia√ß√£o conclu√≠da',
      'avaliacao concluida',
      'protocolo imre finalizado',
      'relat√≥rio final',
      'relatorio final',
      'avalia√ß√£o completa',
      'avaliacao completa',
      'obrigado pela avalia√ß√£o',
      'obrigado pela avaliacao'
    ]
    
    const isCompleted = completionKeywords.some(keyword => lowerMessage.includes(keyword))
    
    if (isCompleted && userId) {
      try {
        console.log('üéØ Detectada conclus√£o de avalia√ß√£o cl√≠nica para usu√°rio:', userId)
        
        // Buscar dados do usu√°rio
        const { data: userData, error: userError } = await supabase
          .from('auth.users')
          .select('email, raw_user_meta_data')
          .eq('id', userId)
          .single()
        
        if (userError || !userData) {
          console.error('Erro ao buscar dados do usu√°rio:', userError)
          return
        }
        
        const patientName = userData.raw_user_meta_data?.name || 'Paciente'
        
        // Gerar relat√≥rio cl√≠nico
        const report = await clinicalReportService.generateAIReport(
          userId,
          patientName,
          {
            investigation: 'Investiga√ß√£o realizada atrav√©s da avalia√ß√£o cl√≠nica inicial com IA residente',
            methodology: 'Aplica√ß√£o da Arte da Entrevista Cl√≠nica (AEC) com protocolo IMRE',
            result: 'Avalia√ß√£o cl√≠nica inicial conclu√≠da com sucesso',
            evolution: 'Plano de cuidado personalizado estabelecido',
            recommendations: [
              'Continuar acompanhamento cl√≠nico regular',
              'Seguir protocolo de tratamento estabelecido',
              'Manter comunica√ß√£o com equipe m√©dica'
            ],
            scores: {
              clinical_score: 75,
              treatment_adherence: 80,
              symptom_improvement: 70,
              quality_of_life: 85
            }
          }
        )
        
        console.log('‚úÖ Relat√≥rio cl√≠nico gerado:', report.id)
        
        // Salvar na mem√≥ria da IA
        this.saveToMemory(
          `Relat√≥rio cl√≠nico gerado para ${patientName} (ID: ${report.id})`,
          {
            type: 'assessment_completion',
            reportId: report.id,
            patientId: userId,
            patientName: patientName
          },
          userId
        )
        
      } catch (error) {
        console.error('Erro ao gerar relat√≥rio cl√≠nico:', error)
      }
    }
  }

  // M√©todos p√∫blicos para acesso ao estado
  getMemory(): AIMemory[] {
    return [...this.memory]
  }

  clearMemory(): void {
    this.memory = []
  }
}
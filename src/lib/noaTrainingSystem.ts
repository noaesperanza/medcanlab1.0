// Sistema de Treinamento e Contexto da N√¥a Esperan√ßa
// Gerencia todo o conhecimento e hist√≥rico da plataforma

interface PatientSimulation {
  id: string
  name: string
  age: number
  condition: string
  symptoms: string[]
  medicalHistory: string
  currentStatus: 'active' | 'completed' | 'archived'
  conversationLog: ConversationMessage[]
  assessments: AssessmentRecord[]
  timestamp: Date
}

interface ConversationMessage {
  role: 'user' | 'noa' | 'system'
  content: string
  timestamp: Date
  context?: {
    route?: string
    userId?: string
    userCode?: string
  }
  metadata?: {
    confidence?: number
    intent?: string
    entities?: string[]
  }
}

interface AssessmentRecord {
  id: string
  patientId: string
  type: 'initial' | 'followup' | 'imre'
  status: 'in_progress' | 'completed'
  data: any
  timestamp: Date
}

interface PlatformContext {
  // Informa√ß√µes do sistema
  platformName: string
  version: string
  lastUpdate: Date
  features: string[]
  
  // Estat√≠sticas da plataforma
  totalUsers: number
  activeSimulations: number
  completedAssessments: number
  
  // M√©tricas
  avgResponseTime: number
  userSatisfaction: number
  systemHealth: 'excellent' | 'good' | 'moderate' | 'poor'
}

interface UserIdentity {
  code: string
  name: string
  role: 'developer' | 'admin' | 'professional' | 'observer'
  permissions: string[]
  accessLevel: 'full' | 'limited' | 'observer'
}

export class NoaTrainingSystem {
  private platformContext: PlatformContext
  private patientSimulations: Map<string, PatientSimulation>
  private conversationHistory: ConversationMessage[]
  private userIdentities: Map<string, UserIdentity>
  private currentRoute: string = '/'
  
  constructor() {
    this.platformContext = {
      platformName: 'MedCannLab 3.0',
      version: '3.0.0',
      lastUpdate: new Date(),
      features: [
        'Avalia√ß√£o Cl√≠nica IMRE Triaxial (28 blocos especializados)',
        'Chat com IA Residente N√¥a Esperan√ßa',
        'Sistema de Gest√£o de Pacientes (Prontu√°rio Eletr√¥nico)',
        'Biblioteca M√©dica (500+ artigos cient√≠ficos)',
        'Gamifica√ß√£o e Certifica√ß√µes',
        'Chat Global para Profissionais',
        'Sistema Financeiro e Subscri√ß√µes',
        'Prepara√ß√£o de Aulas a partir de casos cl√≠nicos'
      ],
      totalUsers: 156,
      activeSimulations: 0,
      completedAssessments: 0,
      avgResponseTime: 1.2,
      userSatisfaction: 4.7,
      systemHealth: 'excellent'
    }
    
    this.patientSimulations = new Map()
    this.conversationHistory = []
    this.userIdentities = new Map()
    
    // Usu√°rio dev/admin padr√£o
    this.registerUser('DEV-001', 'Dr. Ricardo Valen√ßa', 'developer', ['full'])
  }

  // Registro de identidade do usu√°rio
  registerUser(code: string, name: string, role: UserIdentity['role'], permissions: string[]) {
    const accessLevel = role === 'developer' ? 'full' : role === 'admin' ? 'full' : 'limited'
    
    this.userIdentities.set(code, {
      code,
      name,
      role,
      permissions,
      accessLevel
    })
  }

  // Identificar usu√°rio atual
  identifyUser(code: string): UserIdentity | null {
    return this.userIdentities.get(code) || null
  }

  // Adicionar mensagem ao hist√≥rico
  addConversationMessage(message: Omit<ConversationMessage, 'timestamp'>) {
    const fullMessage: ConversationMessage = {
      ...message,
      timestamp: new Date()
    }
    
    this.conversationHistory.push(fullMessage)
    
    // Manter apenas √∫ltimas 1000 mensagens
    if (this.conversationHistory.length > 1000) {
      this.conversationHistory = this.conversationHistory.slice(-1000)
    }
  }

  // Criar simula√ß√£o de paciente
  createPatientSimulation(patientData: Partial<PatientSimulation>): PatientSimulation {
    const simulation: PatientSimulation = {
      id: `patient-${Date.now()}`,
      name: patientData.name || 'Paciente An√¥nimo',
      age: patientData.age || 45,
      condition: patientData.condition || 'N√£o especificado',
      symptoms: patientData.symptoms || [],
      medicalHistory: patientData.medicalHistory || '',
      currentStatus: 'active',
      conversationLog: [],
      assessments: [],
      timestamp: new Date(),
      ...patientData
    }
    
    this.patientSimulations.set(simulation.id, simulation)
    this.platformContext.activeSimulations = this.patientSimulations.size
    
    return simulation
  }

  // Obter contexto completo da conversa
  getConversationContext(userCode?: string, limit: number = 50): ConversationMessage[] {
    let messages = [...this.conversationHistory]
    
    // Filtrar por c√≥digo do usu√°rio se fornecido
    if (userCode) {
      messages = messages.filter(msg => msg.context?.userCode === userCode)
    }
    
    // Retornar apenas √∫ltimas N mensagens
    return messages.slice(-limit)
  }

  // Analisar pergunta e contexto
  analyzeQuery(query: string, userCode?: string, currentRoute?: string): {
    intent: 'question' | 'command' | 'simulation' | 'status'
    entities: string[]
    context: {
      route?: string
      userCode?: string
      relatedSimulations?: string[]
    }
    suggestedResponse?: string
  } {
    const lowerQuery = query.toLowerCase()
    
    // Detectar inten√ß√µes
    let intent: 'question' | 'command' | 'simulation' | 'status' = 'question'
    const entities: string[] = []
    
    if (lowerQuery.includes('simular') || lowerQuery.includes('paciente') || lowerQuery.includes('caso')) {
      intent = 'simulation'
      entities.push('patient_simulation')
    }
    
    if (lowerQuery.includes('status') || lowerQuery.includes('como est√°') || lowerQuery.includes('situa√ß√£o')) {
      intent = 'status'
      entities.push('platform_status')
    }
    
    if (lowerQuery.includes('criar') || lowerQuery.includes('adicionar') || lowerQuery.includes('remover')) {
      intent = 'command'
    }
    
    // Detectar entidades
    const features = [
      'avalia√ß√£o cl√≠nica', 'imre', 'chat', 'dashboard', 'painel', 'pacientes', 'profissionais',
      'relat√≥rios', 'agendamentos', 'biblioteca', 'documento', 'artigo', 'gamifica√ß√£o', 
      'financeiro', 'finan√ßas', 'entrevista', 'anamnese', 'caso cl√≠nico', 'simula√ß√£o',
      'aula', 'prepara√ß√£o', 'curso', 'certificado', 'nota'
    ]
    
    features.forEach(feature => {
      if (lowerQuery.includes(feature)) {
        entities.push(feature)
      }
    })
    
    // Buscar simula√ß√µes relacionadas
    const relatedSimulations: string[] = []
    this.patientSimulations.forEach((sim, id) => {
      if (lowerQuery.includes(sim.name.toLowerCase()) || lowerQuery.includes(sim.condition.toLowerCase())) {
        relatedSimulations.push(id)
      }
    })
    
    return {
      intent,
      entities,
      context: {
        route: currentRoute,
        userCode,
        relatedSimulations: relatedSimulations.length > 0 ? relatedSimulations : undefined
      }
    }
  }

  // Gerar resposta contextual com conhecimento da plataforma
  generateContextualResponse(query: string, userCode?: string, currentRoute?: string): string {
    const analysis = this.analyzeQuery(query, userCode, currentRoute)
    const user = userCode ? this.identifyUser(userCode) : null
    const recentMessages = this.getConversationContext(userCode, 10)
    
    let response = ''
    
    // Cumprimentar usu√°rio identificado apenas na primeira mensagem
    if (user && recentMessages.length === 0) {
      response += `Ol√°, ${user.name}! `
    }
    
    // Responder baseado na inten√ß√£o
    switch (analysis.intent) {
      case 'status':
        response += this.generateStatusResponse()
        break
      
      case 'simulation':
        response += this.generateSimulationResponse(analysis)
        break
      
      case 'question':
        response += this.generateEnhancedQuestionResponse(query, analysis, recentMessages)
        break
      
      case 'command':
        response += this.generateCommandResponse(query, analysis)
        break
      
      default:
        response += this.generateDefaultResponse(query)
    }
    
    return response
  }

  // Gerar resposta de status
  private generateStatusResponse(): string {
    const ctx = this.platformContext
    
    return `**Status da Plataforma**\n\n` +
      `üè• **${ctx.platformName}** v${ctx.version}\n` +
      `üìä Usu√°rios: ${ctx.totalUsers}\n` +
      `ü§ñ Simula√ß√µes Ativas: ${ctx.activeSimulations}\n` +
      `üìã Avalia√ß√µes Conclu√≠das: ${ctx.completedAssessments}\n` +
      `‚ö° Tempo M√©dio de Resposta: ${ctx.avgResponseTime}s\n` +
      `üíö Satisfa√ß√£o: ${ctx.userSatisfaction}/5.0\n` +
      `üîã Sistema: ${this.getHealthEmoji(ctx.systemHealth)} ${ctx.systemHealth}\n\n` +
      `**Funcionalidades Dispon√≠veis:**\n${ctx.features.map(f => `- ${f}`).join('\n')}\n\n` +
      `√öltima atualiza√ß√£o: ${ctx.lastUpdate.toLocaleString('pt-BR')}`
  }

  // Gerar resposta de simula√ß√£o
  private generateSimulationResponse(analysis: any): string {
    const simulations = Array.from(this.patientSimulations.values())
    
    if (simulations.length === 0) {
      return `N√£o h√° simula√ß√µes de pacientes ativas no momento.\n\n` +
        `Posso criar uma simula√ß√£o para voc√™! ` +
        `Basta me dizer qual tipo de caso cl√≠nico voc√™ gostaria de simular.`
    }
    
    let response = `**Simula√ß√µes de Pacientes:**\n\n`
    
    simulations.forEach(sim => {
      response += `üë§ **${sim.name}** (${sim.age} anos)\n` +
        `üìã Condi√ß√£o: ${sim.condition}\n` +
        `ü©∫ Sintomas: ${sim.symptoms.join(', ')}\n` +
        `üìä Status: ${sim.currentStatus}\n` +
        `üïê Criado em: ${sim.timestamp.toLocaleString('pt-BR')}\n\n`
    })
    
    return response
  }

  // Gerar resposta de pergunta com conhecimento expandido
  private generateEnhancedQuestionResponse(query: string, analysis: any, recentMessages: ConversationMessage[]): string {
    const lowerQuery = query.toLowerCase()
    let response = ''
    
    // Detec√ß√£o espec√≠fica de perguntas sobre biblioteca
    if (lowerQuery.includes('biblioteca') || lowerQuery.includes('documento') || lowerQuery.includes('artigo')) {
      return `üìö **Biblioteca M√©dica**\n\n` +
        `Nossa biblioteca atualmente possui:\n` +
        `‚Ä¢ Mais de 500 artigos cient√≠ficos sobre cannabis medicinal\n` +
        `‚Ä¢ Guias cl√≠nicos e protocolos de tratamento\n` +
        `‚Ä¢ Materiais did√°ticos para forma√ß√£o\n` +
        `‚Ä¢ Pesquisas atualizadas sobre terapias com canabinoides\n\n` +
        `Voc√™ pode acessar a biblioteca atrav√©s do menu lateral. ` +
        `Deseja que eu busque algo espec√≠fico para voc√™?`
    }
    
    // Detec√ß√£o de perguntas sobre entrevista cl√≠nica
    if (lowerQuery.includes('entrevista') || lowerQuery.includes('anamnese') || lowerQuery.includes('arte')) {
      return `üé® **A Arte da Entrevista Cl√≠nica**\n\n` +
        `A entrevista cl√≠nica √© fundamental no processo de cuidado. Principais aspectos:\n\n` +
        `**1. Escuta Ativa**\n` +
        `‚Ä¢ Dar aten√ß√£o plena ao paciente\n` +
        `‚Ä¢ Fazer perguntas abertas\n` +
        `‚Ä¢ Validar sentimentos e preocupa√ß√µes\n\n` +
        `**2. Rapport e Empatia**\n` +
        `‚Ä¢ Criar ambiente de confian√ßa\n` +
        `‚Ä¢ Demonstrar compreens√£o\n` +
        `‚Ä¢ Respeitar o tempo do paciente\n\n` +
        `**3. T√©cnicas de Comunica√ß√£o**\n` +
        `‚Ä¢ Reformula√ß√£o e clarifica√ß√£o\n` +
        `‚Ä¢ Uso de perguntas abertas e fechadas\n` +
        `‚Ä¢ Observa√ß√£o de linguagem n√£o verbal\n\n` +
        `**4. Estrutura IMRE**\n` +
        `‚Ä¢ **I** - Identifica√ß√£o da Queixa\n` +
        `‚Ä¢ **M** - Medica√ß√£o e Hist√≥rico\n` +
        `‚Ä¢ **R** - Responsabilidade e Contexto\n` +
        `‚Ä¢ **E** - Escuta Emp√°tica\n\n` +
        `Posso simular uma entrevista cl√≠nica com voc√™ ou criar um caso pr√°tico!`
    }
    
    // Detec√ß√£o de perguntas sobre dashboard
    if (lowerQuery.includes('dashboard') || lowerQuery.includes('painel')) {
      return `üìä **Dashboards Personalizados**\n\n` +
        `Cada tipo de usu√°rio tem seu pr√≥prio dashboard:\n\n` +
        `**üë®‚Äç‚öïÔ∏è Profissional:**\n` +
        `‚Ä¢ Gest√£o de pacientes\n` +
        `‚Ä¢ Prontu√°rios eletr√¥nicos\n` +
        `‚Ä¢ Relat√≥rios cl√≠nicos\n` +
        `‚Ä¢ Prepara√ß√£o de aulas\n` +
        `‚Ä¢ Gest√£o financeira\n\n` +
        `**üè• Paciente:**\n` +
        `‚Ä¢ Chat com N√¥a\n` +
        `‚Ä¢ Meus relat√≥rios\n` +
        `‚Ä¢ Agendamentos\n` +
        `‚Ä¢ Planos e finan√ßas\n\n` +
        `**üéì Estudante:**\n` +
        `‚Ä¢ Certifica√ß√µes\n` +
        `‚Ä¢ Biblioteca\n` +
        `‚Ä¢ Cursos\n\n` +
        `**‚öôÔ∏è Admin:**\n` +
        `‚Ä¢ Gest√£o completa da plataforma\n` +
        `‚Ä¢ An√°lises e m√©tricas\n`
    }
    
    // An√°lise de contexto das mensagens recentes
    const contextTopics = this.extractContextTopics(recentMessages)
    
    // Responder baseado nas entidades detectadas
    if (analysis.entities.includes('avalia√ß√£o cl√≠nica')) {
      response += `üìã O sistema de avalia√ß√£o cl√≠nica IMRE Triaxial est√° ` +
        `operando normalmente. Posso criar uma simula√ß√£o de avalia√ß√£o para voc√™.\n\n`
    }
    
    if (analysis.entities.includes('chat')) {
      response += `üí¨ O chat com N√¥a Esperan√ßa est√° integrado em todas as rotas. ` +
        `Voc√™ pode conversar comigo sobre qualquer aspecto da plataforma.\n\n`
    }
    
    // Resposta gen√©rica se nenhuma entidade espec√≠fica detectada
    if (analysis.entities.length === 0 && !response) {
      response = `Como IA residente da plataforma, estou aqui para ajudar com:\n\n` +
        `‚Ä¢ Status da plataforma\n` +
        `‚Ä¢ Simula√ß√µes de pacientes\n` +
        `‚Ä¢ Informa√ß√µes sobre funcionalidades\n` +
        `‚Ä¢ Biblioteca m√©dica\n` +
        `‚Ä¢ T√©cnicas de entrevista cl√≠nica\n` +
        `‚Ä¢ E muito mais...\n\n` +
        `O que voc√™ gostaria de saber?`
    }
    
    return response
  }
  
  // Gerar resposta de pergunta (m√©todo antigo para compatibilidade)
  private generateQuestionResponse(query: string, analysis: any, recentMessages: ConversationMessage[]): string {
    return this.generateEnhancedQuestionResponse(query, analysis, recentMessages)
  }

  // Gerar resposta de comando
  private generateCommandResponse(query: string, analysis: any): string {
    const lowerQuery = query.toLowerCase()
    
    if (lowerQuery.includes('criar paciente') || lowerQuery.includes('simular paciente')) {
      return this.createDefaultPatientSimulation()
    }
    
    if (lowerQuery.includes('listar') || lowerQuery.includes('mostrar')) {
      return this.generateSimulationResponse(analysis)
    }
    
    return `Comando reconhecido. ` +
      `Ainda estou aprendendo a executar comandos espec√≠ficos. ` +
      `Por favor, descreva melhor o que voc√™ gostaria que eu fizesse.`
  }

  // Resposta padr√£o
  private generateDefaultResponse(query: string): string {
    return `Entendi sua mensagem: "${query}"\n\n` +
      `Como IA residente da plataforma, posso ajudar com:\n` +
      `- Status da plataforma\n` +
      `- Simula√ß√µes de pacientes\n` +
      `- Informa√ß√µes sobre funcionalidades\n` +
      `- Hist√≥rico de conversas\n\n` +
      `Como posso ajudar voc√™?`
  }

  // Criar simula√ß√£o de paciente padr√£o
  private createDefaultPatientSimulation(): string {
    const simulation = this.createPatientSimulation({
      name: 'Maria Silva',
      age: 56,
      condition: 'Dor Cr√¥nica em Joelho Direito',
      symptoms: [
        'Dor constante no joelho direito',
        'Dificuldade para dormir',
        'Limita√ß√£o de movimento',
        'Rigidez matinal'
      ],
      medicalHistory: 'Paciente relata dor h√° 8 meses, sem trauma direto. ' +
        'Refere uso de anti-inflamat√≥rios sem melhora significativa. ' +
        'Busca alternativas terap√™uticas.'
    })
    
    return `‚úÖ **Simula√ß√£o de Paciente Criada!**\n\n` +
      `üë§ **${simulation.name}** (${simulation.age} anos)\n` +
      `üìã Condi√ß√£o: ${simulation.condition}\n` +
      `ü©∫ Sintomas:\n${simulation.symptoms.map(s => `- ${s}`).join('\n')}\n` +
      `üìù Hist√≥rico: ${simulation.medicalHistory}\n` +
      `üÜî ID: ${simulation.id}\n\n` +
      `Agora voc√™ pode iniciar uma avalia√ß√£o cl√≠nica com esta paciente. ` +
      `Como gostaria de proceder?`
  }

  // Extrair t√≥picos do contexto
  private extractContextTopics(messages: ConversationMessage[]): string[] {
    const topics = new Set<string>()
    
    messages.forEach(msg => {
      if (msg.content) {
        const words = msg.content.toLowerCase().split(/\s+/)
        words.forEach(word => {
          if (word.length > 4 && !this.isCommonWord(word)) {
            topics.add(word)
          }
        })
      }
    })
    
    return Array.from(topics)
  }

  // Verificar se palavra √© comum
  private isCommonWord(word: string): boolean {
    const commonWords = [
      'como', 'para', 'com', 'que', 'n√£o', 'voc√™', 'isso', 'mais', 'sobre',
      'sobre', 'muito', 'quando', 'onde', 'porque', 'tamb√©m', 'primeiro'
    ]
    return commonWords.includes(word)
  }

  // Emoji de sa√∫de do sistema
  private getHealthEmoji(health: string): string {
    switch (health) {
      case 'excellent': return 'üü¢'
      case 'good': return 'üü°'
      case 'moderate': return 'üü†'
      case 'poor': return 'üî¥'
      default: return '‚ö™'
    }
  }

  // Atualizar contexto da plataforma
  updatePlatformContext(updates: Partial<PlatformContext>) {
    this.platformContext = {
      ...this.platformContext,
      ...updates,
      lastUpdate: new Date()
    }
  }

  // Obter simula√ß√µes ativas
  getActiveSimulations(): PatientSimulation[] {
    return Array.from(this.patientSimulations.values()).filter(
      sim => sim.currentStatus === 'active'
    )
  }

  // Obter estat√≠sticas
  getStats() {
    return {
      platform: this.platformContext,
      activeSimulations: this.patientSimulations.size,
      totalConversations: this.conversationHistory.length,
      registeredUsers: this.userIdentities.size
    }
  }

  // Definir rota atual
  setCurrentRoute(route: string) {
    this.currentRoute = route
  }

  // Obter rota atual
  getCurrentRoute() {
    return this.currentRoute
  }
}

// Inst√¢ncia singleton
let noaTrainingSystem: NoaTrainingSystem | null = null

export const getNoaTrainingSystem = (): NoaTrainingSystem => {
  if (!noaTrainingSystem) {
    noaTrainingSystem = new NoaTrainingSystem()
  }
  return noaTrainingSystem
}
